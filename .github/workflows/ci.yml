name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          pkg-config \
          xvfb
    
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    # Note: actions-rust-lang/setup-rust-toolchain already includes caching
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features
    
    - name: Run tests
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          # Use virtual display for Ubuntu GUI tests
          xvfb-run -a cargo test --all-features --workspace
        else
          cargo test --all-features --workspace
        fi
      shell: bash
    
    - name: Check CLI compilation
      run: cargo check --bin cliverge
    
    - name: Check core library compilation
      run: cargo check -p cliverge-core

  smoke-test:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          pkg-config \
          xvfb
    
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Build application
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          # Use virtual display for Ubuntu GUI app build verification
          xvfb-run -a cargo build --bin cliverge --release
        else
          cargo build --bin cliverge --release
        fi
      shell: bash
    
    # Note: cliverge is a GUI application, so we only test if it builds
    # GUI applications don't typically have --help flags or CLI commands

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit
    - name: Run security audit
      run: cargo audit

  minimum-rust-version:
    name: Minimum Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust 1.82.0 (MSRV)
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: 1.82.0
    - name: Check with MSRV
      run: cargo check --workspace

# Copyright 2022-2024, axodotdev
# SPDX-License-Identifier: MIT or Apache-2.0
#
# CI that:
#
# * checks for a Git Tag that looks like a release
# * builds artifacts with cargo-dist (archives, installers, hashes)
# * uploads those artifacts to temporary workflow zip
# * on success, uploads the artifacts to a GitHub Release
#
# Note that the GitHub Release will be created with a generated
# title/body based on your changelogs.

name: Release

permissions:
  contents: write

# This task will run whenever you push a git tag that looks like a version
# like "1.0.0", "v0.1.0-prerelease.1", "my-app/0.1.0", "releases/v1.0.0", etc.
# Various formats will be parsed into a VERSION and an optional PACKAGE_NAME, where
# PACKAGE_NAME must be the name of a Cargo package in your workspace, and VERSION
# must be a Cargo-style SemVer Version (must have at least major.minor.patch).
#
# If PACKAGE_NAME is specified, then the announcement will be for that
# package (erroring out if it doesn't have the given version or isn't cargo-dist-able).
#
# If PACKAGE_NAME isn't specified, then the announcement will be for all
# (cargo-dist-able) packages in the workspace with that version (this mode is
# intended for workspaces with only one dist-able package, or with all dist-able
# packages versioned/released in lockstep).
#
# If you have a non-standard tag format, you can set the CARGO_DIST_TAG environment
# variable in the trigger to be the tag name, and this will override the tag event.
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.5)'
        required: true
        type: string

jobs:
  # Run 'cargo dist plan' (or host) to determine what tasks we need to do
  plan:
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
      tag: ${{ steps.determine_tag.outputs.tag }}
      tag-flag: ${{ steps.determine_tag.outputs.tag-flag }}
      publishing: ${{ steps.determine_tag.outputs.publishing }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Determine tag and publishing mode
        id: determine_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发模式
            TAG="${{ github.event.inputs.tag }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "tag-flag=--tag=$TAG" >> $GITHUB_OUTPUT
            echo "publishing=true" >> $GITHUB_OUTPUT
            echo "Manual dispatch with tag: $TAG"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 标签推送触发模式
            TAG="${{ github.ref_name }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "tag-flag=--tag=$TAG" >> $GITHUB_OUTPUT
            echo "publishing=true" >> $GITHUB_OUTPUT
            echo "Tag push with tag: $TAG"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR模式
            echo "tag=" >> $GITHUB_OUTPUT
            echo "tag-flag=" >> $GITHUB_OUTPUT
            echo "publishing=false" >> $GITHUB_OUTPUT
            echo "Pull request mode - no publishing"
          else
            # 其他情况
            echo "tag=" >> $GITHUB_OUTPUT
            echo "tag-flag=" >> $GITHUB_OUTPUT
            echo "publishing=false" >> $GITHUB_OUTPUT
            echo "Unknown trigger mode - no publishing"
          fi
      - name: Install cargo-dist
        # we specify bash to get pipefail; it guards against the `curl` command
        # failing. otherwise `sh` won't catch that `curl` returned non-0
        shell: bash
        run: "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.29.0/cargo-dist-installer.sh | sh"
      - id: plan
        run: |
          TAG_FLAG="${{ steps.determine_tag.outputs.tag-flag }}"
          echo "Running cargo dist plan with: $TAG_FLAG"
          cargo dist plan $TAG_FLAG --output-format=json > plan-dist-manifest.json
          echo "cargo dist ran successfully"
          cat plan-dist-manifest.json
          echo "manifest<<EOF" >> $GITHUB_OUTPUT
          cat plan-dist-manifest.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Upload dist-manifest.json"
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-plan-dist-manifest
          path: plan-dist-manifest.json

  # Build and packages all the platform-specific things
  build-local-artifacts:
    name: build-artifacts (${{ join(matrix.targets, ', ') }})
    # Let the initial task tell us to not run (currently very blunt)
    needs:
      - plan
    if: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix.include != null && (needs.plan.outputs.publishing == 'true' || fromJson(needs.plan.outputs.val).ci.github.pr_run_mode == 'upload') }}
    strategy:
      fail-fast: false
      # Target platforms/runners are computed by cargo-dist in create-release.
      # Each member of the matrix has the following arguments:
      #
      # - runner: the github runner
      # - dist-args: cli flags to pass to cargo dist
      # - install-dist: expression to run to install cargo-dist on the runner
      #
      # Typically there will be:
      # - 1 "global" task that builds universal installers
      # - N "local" tasks that build each platform's binaries and platform-specific installers
      matrix: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target/distrib/${{ join(matrix.targets, '-') }}-dist-manifest.json
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ join(matrix.targets, '-') }}
      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}
      # Get the dist-manifest
      - name: Fetch local artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-plan-dist-manifest
          path: target/distrib/
      - name: Install dependencies
        run: |
          ${{ matrix.packages-install }}
      - name: Build artifacts
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist build ${{ needs.plan.outputs.tag-flag }} --print=linkage --output-format=json ${{ matrix.dist-args }} > dist-manifest.json
          echo "cargo dist ran successfully"
          cat dist-manifest.json
          cp dist-manifest.json "$BUILD_MANIFEST_NAME"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-build-local-${{ join(matrix.targets, '_') }}
          path: |
            target/distrib/**/*.tar.xz
            target/distrib/**/*.zip
            target/distrib/**/*.msi
            target/distrib/**/*.pkg
            target/distrib/**/*.dmg
            target/distrib/**/*.deb
            target/distrib/**/*.rpm

  # Build and package all the platform-agnostic(ish) things
  build-global-artifacts:
    needs:
      - plan
      - build-local-artifacts
    runs-on: "ubuntu-20.04"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix.include != null && (needs.plan.outputs.publishing == 'true' || fromJson(needs.plan.outputs.val).ci.github.pr_run_mode == 'upload') }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install cargo-dist
        shell: bash
        run: "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.29.0/cargo-dist-installer.sh | sh"
      # Get all the local artifacts for the global tasks to use (for e.g. checksums)
      - name: Fetch local artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true
      - id: cargo-dist
        name: Build artifacts
        run: |
          cargo dist build ${{ needs.plan.outputs.tag-flag }} --output-format=json "--artifacts=global" > dist-manifest.json
          echo "cargo dist ran successfully"
          cat dist-manifest.json
      # Upload the final result (this will be what creates the release)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-dist-manifest
          path: dist-manifest.json

  # Create a GitHub Release while uploading all files to it
  host:
    needs:
      - plan
      - build-local-artifacts
      - build-global-artifacts
    # Only run if we're "publishing", and only if local and global didn't fail (skipped is fine)
    if: ${{ always() && needs.plan.outputs.publishing == 'true' && (needs.build-global-artifacts.result == 'skipped' || needs.build-global-artifacts.result == 'success') && (needs.build-local-artifacts.result == 'skipped' || needs.build-local-artifacts.result == 'success') }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Download GitHub artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: artifacts
          merge-multiple: true
      - name: Cleanup
        run: |
          # Remove the granular manifests
          rm -f artifacts/*-dist-manifest.json
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.plan.outputs.tag }}
          name: ${{ needs.plan.outputs.tag }}
          body: |
            ## What's Changed
            
            This release includes CLIverge - the universal CLI tool manager.
            
            ### Downloads
            
            - **Windows**: Download the `.msi` installer or `.exe` files
            - **macOS**: Download the `.dmg` installer or `.tar.xz` archive  
            - **Linux**: Download the `.deb`/`.rpm` packages or `.tar.xz` archive
            
            ### Installation
            
            You can install CLIverge using our install scripts:
            
            **Shell (Linux/macOS):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/install.sh | sh
            ```
            
            **PowerShell (Windows):**
            ```powershell
            irm https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/install.ps1 | iex
            ```
            
            Or download the appropriate package for your platform from the assets below.
          artifacts: "artifacts/*"
          allowUpdates: true
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
